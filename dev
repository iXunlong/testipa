#!/bin/bash
# by michael 20180926
#

# AutoiOSPacketge.sh
# iOS 自动打包Shell
# 可以从 qqbot 或手动输入 来获取打包命令
# -1 参数列表
#    -t               打测试线，不加此参数则默认打正式线
#    -r #NAME#        设置项目的根路径为#NAME#, 否则使用默认路径
#    -a #NAME#        选取名为#NAME#的 target
#    -b #NAME#        切换到#NAME#分支打包
#    -z 显示上一次打包使用的配置
#    -i #NAME#        更改info.plist的所属目录
#    -m #TEXT#        更新说明，默认没有，待实现，归档存储，将显示在发布后的下载页
#    

# -2 QQ机器人，远程命令调用本shell, 打包状态实时通知
# -3 本地Apache服务器布置iPA http在线备份及下载服务


# 声明变量
isTest=1
#branchName为default时，默认不切换分支，使用当前分支打包，如果有输入分支参数，则切换分支
branchName="default"
# build 起始数字, 测试线01, 正式线51
buildInitialNo="51"

gitFolderName="gunqiuios"
projectName="LotteryGuess"
targetName="LotteryGuess_E1"
infoPlistFolderName="LotteryGuess/SupportingFiles"


#branchName为default时，默认不切换分支，使用当前分支打包，如果有输入分支参数，则切换分支
branchName="default"

echo "读取参数列表"
getNext=0
#  $*为循环获取下一个参数

for var in $*; do
    if [[ $getNext == 0 ]]; then
        if [[ "$var" == '-t' ]]; then
        isTest=0
        elif [[ "$var" == '-r' ]]; then
        getNext=1
        continue
        elif [[ "$var" == '-b' ]]; then
        getNext=2
        continue
        elif [[ "$var" == '-i' ]]; then
        getNext=3
        continue
        elif [[ "$var" == '-z' ]]; then
        getNext=4
        continue
        elif [[ "$var" == '-a' ]]; then
        getNext=5
        continue
        else
        echo "error: 不能识别'$var' 它不是一个有效参数"
        fi

    elif [[ $getNext == 1 ]]; then
        echo "获取参数内容 $var"
        #这里用来获取一些需要设置名称的参数
        gitFolderName=$var
        echo "项目根目录路径已变更为 $gitFolderName"
        getNext=0
    elif [[ $getNext == 2 ]]; then
        #切换分支
        branchName=$var
        echo "设置分支为 $branchName"
        getNext=0
    elif [[ $getNext == 3 ]]; then
        infoPlistFolderName=$var
        echo "设置target/infoPlist文件夹目录为 $infoPlistFolderName"
        getNext=0
    elif [[ $getNext == 4 ]]; then
        
        echo "上一次打包的配置：暂未支持"
        getNext=0
    elif [[ $getNext == 5 ]]; then
        targetName=$var
        echo "设置target为 $targetName"
        getNext=0
    fi
done

echo "参数列表读取完毕"

#请预先在桌面创建此目录
cd ~/Desktop/AutoPublish

#打包目录
if [[ -d ./archiveAndExportFile ]]; then
echo "archiveAndExportFile already exists"
rm -rf ./archiveAndExportFile
echo "delete previous archiveAndExportFile succeeded"
fi
mkdir ./archiveAndExportFile

#项目的根路径
autoProjectRootPath="./${gitFolderName}/${projectName}"
infoPlistPath="${infoPlistFolderName}/Info.plist"

cd ${autoProjectRootPath} || exit

# 0.5 DisplayName, APP 名称
APPName=$(/usr/libexec/PlistBuddy -c "print CFBundleDisplayName" ${infoPlistPath}) || exit
# 0.6 BundleId, -showBuildSettings 命令取出的是(PRODUCT_BUNDLE_IDENTIFIER = com.rtjk.xshl)
# 需要将 BundleId 字符串中最后一个空格到第一个字符全部删除
BundleID=`xcodebuild -showBuildSettings | grep PRODUCT_BUNDLE_IDENTIFIER`
BundleID=${BundleID##* }

# 0.7 BundleVersionShort, APP 版本号
APPVersion=$(/usr/libexec/PlistBuddy -c "print CFBundleShortVersionString" ${infoPlistPath}) || exit
# 0.8 获取当前BundleVersion,  Build 号 
#bundleVersion=$(/usr/libexec/PlistBuddy -c "print CFBundleVersion" ${infoPlistPath}) || exit
bundleVersion=$(cat ../buildVersionSave.txt)
echo "build version is ${bundleVersion}"

# 获取当前日期
currentDate="$(date +"%Y%m%d")"
currentYearMouth="$(date +"%Y%m")"
currentDay="$(date +"%d")"
#默认正式线，若带有-t参数，则打测试线
if [[ $isTest == 1 ]]; then
    echo "当前打包模式为测试线"

    buildInitialNo="01"
else
    echo "当前打包模式为正式线"
fi

# 确定本次打包要用的bundleVersion
if [ -z "$bundleVersion" ]; then
    echo "新一天第一次打包"
    # 重置bundleVersion
    bundleVersion="${currentDate}${buildInitialNo}"
elif [[ $currentDate -gt ${bundleVersion:0:8} ]]; then
    echo "新一天第一次打包"
    # 重置bundleVersion
    bundleVersion="${currentDate}${buildInitialNo}"
else
    # bundleVersion加1
    buildCount=${bundleVersion:8:10}
    echo "build count is ${buildCount}"
    if [[ $isTest == 1 ]]; then
        if [[ $buildCount>=50 ]]; then
            buildCount=buildCount-50
        fi
    else
        if [[ $buildCount<50 ]]; then
            buildCount=buildCount+50
        fi
    fi
    bundleVersion="${currentDate}${buildCount}"
    bundleVersion=`expr $bundleVersion + 1`
fi
echo "bundleVersion: $bundleVersion"

# 1. 更新代码
# 1.0 强制撤销所有本地修改(已经 commit 了则不能撤销), 打包工程严禁提交代码, 只可以做代码更新以及临时提交, 不允许提交代码入库.
git reset --hard
# 1.1 清理缓存缓存
xcodebuild clean -workspace ${projectName}.xcworkspace -scheme ${targetName} -configuration Release

# 1.2 更新代码
git pull

if [[ $? -ne 0 ]]; then
    echo "代码更新失败, 请检测失败原因, 本次打包即将终止."
    exit 1    
fi

# 写入新的正式线/测试线
/usr/libexec/PlistBuddy -c "Set TestLine ${isTest}" ${infoPlistPath}
if [ $? -eq 0 ]; then
    echo "*******TestLine is ${isTest}*******"
fi

# 写入新的bundleVersion
/usr/libexec/PlistBuddy -c "Set CFBundleVersion $bundleVersion" ${infoPlistPath}
if [ $? -eq 0 ]; then
    echo "bundleVersion写入成功: $bundleVersion"
else
    echo "bundleVersion写入失败"
    exit
fi

if [[ -f ../buildVersionSave.txt ]]; then
    sudo rm ../buildVersionSave.txt
fi
sudo touch ../buildVersionSave.txt
sudo chmod 777 ../buildVersionSave.txt
sudo echo ${bundleVersion} > ../buildVersionSave.txt

# 2.3 配置最后的 IPA 包的名称
IPAName="${APPName}_${BundleID}_${APPVersion}_${bundleVersion}"
if [[ ${isTest} = "0" ]]; then
    IPAName="${IPAName}_Test" # 如果是测试线后面会拼上 Test字段
fi
echo "*******IPAName is ${IPAName}*******"

# 3. 开始打包
# 3.0 archive 
xcodebuild archive -workspace ${projectName}.xcworkspace -scheme ${targetName} -configuration Release\
 -archivePath ../../archiveAndExportFile/${projectName}
if [ $? -ne 0 ]; then
    say "Archive 失败, 请检查失败原因, 本次打包即将终止"
    exit 1
fi

# 3. export
xcodebuild -exportArchive -archivePath "../../archiveAndExportFile/${projectName}.xcarchive" -exportPath ../../archiveAndExportFile -exportOptionsPlist ../ExportOptions.plist

if [ $? -eq 0 ]; then
    echo "打包成功"
else
    echo "打包失败"
    exit
fi

# 重命名ipa
echo "ipaName: $IPAName"
cd ../../archiveAndExportFile || exit
mv ${targetName}.ipa ${IPAName}.ipa

if [ $? -eq 0 ]; then
    echo "重命名成功"
else
    echo "重命名失败"
    exit
fi

echo "打包程序执行完毕"

# 调用发布程序
cd /Library/WebServer/Documents

#Web 服务目录
if [[ -d ./ipaDownloadServer ]]; then
    echo "ipaDownloadServer 已存在"
else
    sudo mkdir ./ipaDownloadServer
fi

cd ./ipaDownloadServer
#这里的目录规则为：按年月归类为一个文件夹   日期为一个子目录， 子目录中是具体的ipa文件, 为每个子文件建立超链和描述

if [[ -d ./${currentYearMouth} ]]; then
    echo "月目录已存在"
else
    sudo mkdir ./${currentYearMouth}
fi

if [[ -f ./mouthMenu.txt ]]; then
    echo "月索引已存在,删后重建"
    sudo rm ./mouthMenu.txt
fi
mouthDir=$(ls -l ./ |awk '/^d/ {print $NF}')
sudo touch ./mouthMenu.txt
sudo chmod 777 ./mouthMenu.txt
sudo echo ${mouthDir} > ./mouthMenu.txt

echo "月索引构建完成"

cd ./${currentYearMouth}

#进入子目录
if [[ -d ./${currentDay} ]]; then
    echo "日目录已存在"
else
    sudo mkdir ./${currentDay}
fi

if [[ -f ./dayMenu.txt ]]; then
    echo "日索引已存在,删后重建"
    sudo rm ./dayMenu.txt
fi
dayDir=$(ls -l ./ |awk '/^d/ {print $NF}')
sudo touch ./dayMenu.txt
sudo chmod 777 ./dayMenu.txt
sudo echo ${dayDir} > ./dayMenu.txt

cd ./${currentDay}

#迁移打好的包到web服务相应目录下
#todo: 将描述信息文本也同步封存
sudo mv ~/Desktop/AutoPublish/archiveAndExportFile/${IPAName}.ipa ./${bundleVersion}.ipa

#创建每个ipa相应的plist文件, 用于生成在线下载链接
sudo touch ./${IPAName}.plist
sudo chmod 777 ./${IPAName}.plist

localPath="http://192.168.8.193/ipaDownloadServer/"

sudo cat > ./${IPAName}.plist << END_PLIST
<plist version="1.0">
<dict>
<key>items</key>
<array>
<dict>
<key>assets</key>
<array>
<dict>
<key>kind</key>
<string>software-package</string>
<key>url</key>
<string>${localPath}${currentYearMouth}/${currentDay}/${bundleVersion}.ipa</string>
</dict>
<dict>
<key>kind</key>
<string>full-size-image</string>
<key>needs-shine</key>
<true/>
<key>url</key>
<string>
</string>
</dict>
<dict>
<key>kind</key>
<string>display-image</string>
<key>needs-shine</key>
<true/>
<key>url</key>
<string>
</string>
</dict>
</array>
<key>metadata</key>
<dict>
<key>bundle-identifier</key>
<string>${BundleID}</string>
<key>bundle-version</key>
<string>${APPVersion}</string>
<key>kind</key>
<string>software</string>
<key>title</key>
<string>${APPName}</string>
</dict>
</dict>
</array>
</dict>
</plist>

END_PLIST

if [[ -f ./ipaMenu.txt ]]; then
    echo "ipa索引已存在,删后重建"
    sudo rm ./ipaMenu.txt
fi
sudo touch ./ipaMenu.txt
sudo chmod 777 ./ipaMenu.txt
sudo find . -iname "*.ipa" > ./ipaMenu.txt
echo "当前所处目录："
pwd
ls
cd /Library/WebServer/Documents/
#调用createHtml
if [[ -f ./createHtml ]]; then
    #statements
    sh ./createHtml
fi
echo "发布程序执行完毕----------------------------"

